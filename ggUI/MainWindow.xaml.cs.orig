using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Runtime.InteropServices;
using System.Windows.Media.Effects;
using System.Text.RegularExpressions;
using System.IO;
using System.Windows.Threading;
using System.Reflection;
using gg;
using System.Diagnostics;


namespace ggUI
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
       #region variables
       public double txtwidth = 0, txtheight = 0, txttop = 0, txtleft = 0, txtcmdlinetop = 0, lblerrtop = 0,frameTop = 0;
       private int TEXTBOX_NO = 5, nowindex = 0, txtshift = 0, id = 0, historyindex = 0, careti = 0, tutpages=17;
       private RichTextBox now;
       private TextBox txtcmdline, txtError, txtnextarrow, txtprevarrow;
       private Label lblBack;
       private List<RichTextBox> arr;
       private List<string> taglist, history;
       private List<bool> deletedlist;
       private FontFamily def_font = new FontFamily("Liberation Sans");
       private FontFamily def_font_arrow = new FontFamily("Anklada™ Original");
       
       private Polygon blackFrameleft, blackFrameright, left, right;
      
       private SolidColorBrush red = new SolidColorBrush(Color.FromRgb(255,73,73)),
                               yellow = new SolidColorBrush(Color.FromRgb(255, 255, 150)),
                               green = new SolidColorBrush(Color.FromRgb(150, 255, 120)),
                               blue = new SolidColorBrush(Color.FromRgb(120, 150, 255)),
                               black = new SolidColorBrush(Colors.Black),
                               white = new SolidColorBrush(Colors.White);

       private string[] months = { "January", "Febuary", "March","April", "May", "June", "July", "August", "September", "October", "November", "December" };
       Invoker invoke;
       System.Windows.Forms.NotifyIcon ni;

       private const string ADD_PATTERN = "^(a|add)$",
                            LIST_PATTERN = "^(ls|list)$",
                            CHANGE_PATTERN = "^(ch|change)$",
                            REMOVE_PATTERN = "^(rm|remove)$",
                            SYNC_PATTERN = "^(sync)$",
                            PIN_PATTERN = "^(pin)$",
                            ACT_PATTERN = "^(act)$";

       public const string SettingsFile = "gg.ini";
       public string shortcut = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\gg.lnk";

       public Key ShowHotkey = Key.F12, ExitHotkey = Key.End, ScrollHotkey = Key.RightCtrl;
       public options OptWin;
       public bool showopt = false, show=false, RunOnStartup=true, stolefocus=false, tutorialmode=true;
       DispatcherTimer timer;
#endregion
       #region DLLIMPORT
       [DllImport("user32.dll")]
       static extern int CallNextHookEx(IntPtr hhk, int code, int wParam, ref kbInfo lParam);
       [DllImport("user32.dll")]
       static extern IntPtr SetWindowsHookEx(int idHook, deleHooky callback, IntPtr hInstance, uint theardID);
       [DllImport("user32.dll")]
       static extern bool UnhookWindowsHookEx(IntPtr hInstance);
       [DllImport("kernel32.dll")]
       static extern IntPtr LoadLibrary(string lpFileName);
       [DllImport("user32.dll")]
       static extern short GetKeyState(int vKey);
       [DllImport("user32.dll")]
       static extern void mouse_event(int dwFlags, int dx, int dy, int dwData, int dwExtraInfo);
       [DllImport("user32.dll")]
       static extern bool SetCursorPos(int X, int Y);

       private const int MOUSEEVENTF_LEFTDOWN = 0x02;
       private const int MOUSEEVENTF_LEFTUP = 0x04;
       private const int MOUSEEVENTF_RIGHTDOWN = 0x08;
       private const int MOUSEEVENTF_RIGHTUP = 0x10;
       private const int MOUSEEVENTF_ABSOLUTE = 0x8000;

       deleHooky hookDelegate;
       IntPtr hookHandle=IntPtr.Zero;
       
       private const int WH_KEYBOARD_LL = 13;
       private const int WM_KEYDOWN = 0x0100;
       private const int VK_RETURN = 0X0D; //Enter
       private const int VK_SPACE = 0X20; //Space
       private const int VK_SHIFT = 0x10;
       private const int VK_CAPITAL = 0x14;
       private const int VK_CONTROL = 0x11;
       private const int VK_PAUSE = 0x13;
       const int VK_F12 = 0x7B; 

       public struct kbInfo
       {
           public int vkCode;
           public int scanCode;
           public int flags;
           public int time;
           public int dwExtraInfo;
       }


       public delegate int deleHooky(int Code, int wParam, ref kbInfo lParam);


        #endregion

        private void BeginLogic(){
            invoke = Invoker.GetInstance();
            taglist = new List<String>(invoke.GetTagList());
            taglist.Add("All");
            TEXTBOX_NO = taglist.Count();
        }
        
        private GGResult GetTagContents(String tag){
            if(tag=="All") return invoke.InvokeCommand("ls");
            return invoke.InvokeCommand("ls #" + tag);
        }
        
        private TableRow AddTitle(string Text)
        {
            TableCell tc = new TableCell();
            TableRow tr = new TableRow();
           
            Run r = new Run(Text);
            r.Foreground = black;//new SolidColorBrush(Colors.Red);
            r.FontSize = 24;
            r.FontWeight = FontWeights.Bold;

            Paragraph p = new Paragraph();
          
            p.Inlines.Add(r);
            tc.Blocks.Add(p);

            tc.BorderThickness = new Thickness(0, 10, 0, 10);
            tr.Cells.Add(tc);
            return tr;
        }
        
        private TableCell NewItemCell(string Text)
        {
            TableCell tc = new TableCell();
            Run r = new Run(Text);
            r.Foreground = black;
            r.FontSize = 14;
            r.FontWeight = FontWeights.Medium;
            Paragraph p = new Paragraph();

            p.Inlines.Add(r);
            tc.Blocks.Add(p);
            return tc;
        }
        
        private TableRow AddItemRow(string Text)
        {
            TableRow tr = new TableRow();
            
           // tr.Cells.Add(newItemCell("\t"+INDENT));
           
            string[] parts = Text.Split('|');
            TableCell desc = NewItemCell(parts[0]);
            TableCell tag = NewItemCell(parts[1]);
            TableCell date = NewItemCell(parts[2]);

            date.TextAlignment = TextAlignment.Right;
            
            tr.Cells.Add(desc);
            tr.Cells.Add(tag);
            tr.Cells.Add(date);
          
            return tr;
        }
        
        private TableRowGroup AddTextChunkToTable(string chunk)
        {
            TableRowGroup trg = new TableRowGroup();
            String[] lines = chunk.Split('\n');
            for (int j = 0; j < lines.Count(); j++)
                if(lines[j]!="")trg.Rows.Add(AddItemRow(lines[j]));
            return trg;
        }
        
        private void RefreshContents(int index)
        {
            now.Document.Blocks.Clear();
            Table t = new Table();
            
            t.Columns.Add(new TableColumn());
            t.Columns.Add(new TableColumn());
            t.Columns.Add(new TableColumn());

            TableRowGroup trg = new TableRowGroup();
            trg.Rows.Add(AddTitle(taglist[index]));
            t.RowGroups.Add(trg);
            t.RowGroups.Add(AddTextChunkToTable(GetTagContents(taglist[index]).GetMainResult()));
            t.BorderThickness = new Thickness(txtwidth/16,0,0,0);
            t.CellSpacing = 10;

            double tablewidth = txtwidth * (13.2 / 16.0);
            

            t.Columns[0].Width = new GridLength(tablewidth/2);
            t.Columns[1].Width = new GridLength(tablewidth/4);
            t.Columns[2].Width = new GridLength(tablewidth/4);
            
            now.Document.Blocks.Add(t);
                     
        }
        
        private void InitTextBoxContents()
        {
            for (int i = 0; i < taglist.Count; i++)
            {
                RefreshContents(i);
            }
        }
        
        private int vkKey(Key k)
       {
           return KeyInterop.VirtualKeyFromKey(k);
       }
        
        public bool IsDown(int vKey)
       {
          // MessageBox.Show( GetKeyState(vKey).ToString());
           return (GetKeyState(vKey) & 0x80) == 0x80;
       }

       public bool IsKeyDown(Key vKey)
       {
           // MessageBox.Show( GetKeyState(vKey).ToString());
           return (GetKeyState(vkKey(vKey)) & 0x80) == 0x80;
       }
/*
       private void checkdue(object sender, EventArgs e)
       {
           GGList gglist = invoke.GetGGList();
           String items = "";
           for (int i = 0; i < gglist.Count(); i++)
           {
               int seconds = gglist[i].EndDate.Subtract(DateTime.Now).Seconds;
               if (seconds > 0 && seconds < 3600)
               {
                   items += i + ". " + gglist[i].Description + "\n";
               }
           }
           if (!items.Equals("")) showballoon("You have items due within an hour:\n" + items);
       }

       private void begintimer()
       {
           timer = new DispatcherTimer();
           timer.Interval = new TimeSpan(1, 0, 0);
           timer.IsEnabled = true;
           timer.Tick += new EventHandler(checkdue);
           timer.Start();
       }
        */
       private void wiggle()
       {
           Process sexy = new Process();
           sexy.StartInfo.FileName = "http://www.youtube.com/watch?v=wyx6JDQCslE";
           sexy.StartInfo.UseShellExecute = true;
           sexy.Start();
           
           Run r = new Run("WIGGLE");
           r.Foreground = black;//new SolidColorBrush(Colors.Red);
           r.FontSize = 160;
           r.FontWeight = FontWeights.Bold;
           Paragraph p = new Paragraph(r);

           Run r2 = new Run("\n\t\t\t\tSexy And I Know It");
           r2.Foreground = red;//new SolidColorBrush(Colors.Red);
           r2.FontSize = 32;
           r2.FontWeight = FontWeights.Bold;
           p.Inlines.Add(r2);

           p.Margin = new Thickness(txtwidth * 0.1, txtheight * 0.1, 0, 0);
           now.Document.Blocks.Clear();
           now.Document.Blocks.Add(p);

           Storyboard sb = new Storyboard();

           DoubleAnimationUsingKeyFrames fi = new DoubleAnimationUsingKeyFrames();
           fi.BeginTime = TimeSpan.FromMilliseconds(0);

           for(int i=0;i<10;i++){
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(0, TimeSpan.FromMilliseconds(i*100)));
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(20, TimeSpan.FromMilliseconds(i*100+50)));
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(0, TimeSpan.FromMilliseconds(i*100+100)));
           }

         
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(0, TimeSpan.FromMilliseconds(1000)));
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(100, TimeSpan.FromMilliseconds(1500)));
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(0, TimeSpan.FromMilliseconds(2000)));
           
           //fi.KeyFrames.Add(new LinearDoubleKeyFrame(0, TimeSpan.FromMilliseconds(1500)));

          
           Storyboard.SetTarget(fi, winmain);
           Storyboard.SetTargetProperty(fi, new PropertyPath("(UIElement.RenderTransform).(TranslateTransform.Y)"));

           sb.Children.Add(fi);
           
           sb.RepeatBehavior = RepeatBehavior.Forever;

           // sb.AutoReverse = true;  
           sb.Begin();
          
       }

       public void stealfocus()
       {
           int x = (int)winmain.ActualWidth / 2, y = (int)winmain.ActualHeight / 2;
           SetCursorPos(x, y);
           mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_ABSOLUTE, x, y, 0, 0);
           mouse_event(MOUSEEVENTF_LEFTUP | MOUSEEVENTF_ABSOLUTE, x, y, 0, 0);
       }

        public void showhide()
       {
           if (show)
           {
               MoveY(winmain, 0, -(int)winmain.Height, 500);
               invoke.CleanUp();
               stolefocus = false;
           }
           else
           {
               MoveY(winmain, -(int)winmain.Height, 0, 500);
               winmain.Activate();
               txtcmdline.Focus();
           }
           show = !show;
       }
        public void showandhide()
        {
          
            Storyboard sb = new Storyboard();
        
            DoubleAnimationUsingKeyFrames fi = new DoubleAnimationUsingKeyFrames();
            fi.BeginTime = TimeSpan.FromMilliseconds(0);
          
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(0,TimeSpan.FromMilliseconds(0)));
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(-500, TimeSpan.FromMilliseconds(500)));
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(-500, TimeSpan.FromMilliseconds(1000)));
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(0, TimeSpan.FromMilliseconds(1500)));

            sb.Children.Add(fi);
            Storyboard.SetTarget(sb, winmain);
            Storyboard.SetTargetProperty(sb, new PropertyPath("(UIElement.RenderTransform).(TranslateTransform.Y)"));
           
           // sb.AutoReverse = true;  
            sb.Begin();
            stolefocus = false;
            winmain.Activate();
            txtcmdline.Focus();
        }

       public void showhideopt()
       {
           if (showopt)
           {
               OptWin.updatevalues();
               MoveX(OptWin, 0, -(int)OptWin.Width, 500);
               txtcmdline.Focus();
           }
           else
           {
               OptWin.updatevalues();
               MoveX(OptWin, -(int)OptWin.Width, 0, 500);
               OptWin.Activate();
           }
           showopt = !showopt;
       }
       public int HookDelegate(int nCode, int wParam, ref kbInfo lParam){
           if (nCode == 0)
           {
               kbInfo ki = (kbInfo)lParam;
               if (wParam == WM_KEYDOWN)
                   if (ki.vkCode == vkKey(ShowHotkey))
                   {
                       if (tutorialmode && nowindex == tutpages-1)
                       {
                           //showhide();
                           showandhide();
                           DestroyTutorialMode();
                       }
                       else
                       {
                           showhide();
                           if (showopt) showhideopt();
                       }
                   }
                   else if (ki.vkCode == vkKey(ExitHotkey))
                   {
                       invoke.CleanUp();
                       Application.Current.Shutdown();
                   }
                   else if (IsDown(VK_SHIFT) && ki.vkCode == vkKey(Key.F11))
                   {
                       if (show) showhideopt();
                   }
                   else if (IsDown(VK_SHIFT) && ki.vkCode == vkKey(Key.F9))
                   {
                       if (show && !tutorialmode)
                       {
                           showandhide();
                           DestroyMainMode();
                           tutorialmode = true;
                       }
                   }
                   else if (show && !stolefocus)
                   {
                       stealfocus();
                       stolefocus = true;
                   }

           }
           return CallNextHookEx(IntPtr.Zero, nCode, wParam, ref lParam);
       }

       public void createshortcut()
       {
           if (File.Exists(shortcut)) return;
           IWshRuntimeLibrary.WshShell wsh = new IWshRuntimeLibrary.WshShell();
           IWshRuntimeLibrary.IWshShortcut ggshortcut = (IWshRuntimeLibrary.IWshShortcut)wsh.CreateShortcut(shortcut);
           ggshortcut.TargetPath = Assembly.GetExecutingAssembly().Location;
           ggshortcut.IconLocation = (new FileInfo(Assembly.GetExecutingAssembly().Location)).DirectoryName + "\\gg.ico";
           ggshortcut.WorkingDirectory = (new FileInfo(Assembly.GetExecutingAssembly().Location)).DirectoryName;
           ggshortcut.Description = "GG";
           
           ggshortcut.Save();
       }

       public void deleteshortcut()
       {

           
           if(File.Exists(shortcut))File.Delete(shortcut);
          
       }

        public MainWindow()
        {
            InitializeComponent();
          
            hookDelegate = new deleHooky(HookDelegate);
            hookHandle=SetWindowsHookEx(WH_KEYBOARD_LL,hookDelegate,LoadLibrary("User32"),0);

            ni = new System.Windows.Forms.NotifyIcon();
            ni.Icon = new System.Drawing.Icon("gg.ico");
            ni.Visible = true;
            ni.Text = "GG is running. Press hotkey or click here to begin.";
            ni.Click += new EventHandler(delegate(object o, EventArgs e)
            {
                showhide();
                if (showopt) showhideopt();
            });
/*
            ni.BalloonTipClicked += new EventHandler(delegate(object o, EventArgs e)
            {
                showhide();
                if (showopt) showhideopt();
            });
  */          
          
           
            //   createshortcut();
            
        }


        private void showballoon(string str){
            ni.BalloonTipIcon = System.Windows.Forms.ToolTipIcon.Warning;
            ni.BalloonTipText = str;
            ni.BalloonTipTitle = "GG";
            ni.ShowBalloonTip(5000);
        }

        private bool IsAddCommand(string text)
        {
            return Regex.IsMatch(text, ADD_PATTERN, RegexOptions.IgnoreCase);
        }

        private bool IsListCommand(string text)
        {
            return Regex.IsMatch(text, LIST_PATTERN, RegexOptions.IgnoreCase);
        }

        private bool IsChangeCommand(string text)
        {
            return Regex.IsMatch(text, CHANGE_PATTERN, RegexOptions.IgnoreCase);
        }

        private bool IsRemoveCommand(string text)
        {
            return Regex.IsMatch(text, REMOVE_PATTERN, RegexOptions.IgnoreCase);
        }

        private bool IsSyncCommand(string text)
        {
            return Regex.IsMatch(text, SYNC_PATTERN, RegexOptions.IgnoreCase);
        }

        private bool IsPinCommand(string text)
        {
            return Regex.IsMatch(text, PIN_PATTERN, RegexOptions.IgnoreCase);
        }
        private bool IsActCommand(string text)
        {
            return Regex.IsMatch(text, ACT_PATTERN, RegexOptions.IgnoreCase);
        }

        private bool IsUserTyping()
        {
            return careti <= txtcmdline.CaretIndex;
        }

        private void InitCommandLine()
        {
            if (txtcmdline != null) return;
            txtcmdline = new TextBox();
            txtcmdline.Name = "cmdline";
            this.RegisterName(txtcmdline.Name, txtcmdline);
            Canvas.SetZIndex(txtcmdline, 120);
            txtcmdline.Height = 30;
            txtcmdline.Width = txtwidth;
           // txtcmdline.FontWeight = FontWeights.Bold;
            txtcmdline.FontSize = 14;
            txtcmdline.Padding = new Thickness(5,5,0,0);
            txtcmdline.Background = new SolidColorBrush(Color.FromArgb(255,0, 0, 0));
            txtcmdline.Foreground = new SolidColorBrush(Color.FromArgb(255, 255, 255, 255));
            txtcmdline.HorizontalAlignment = HorizontalAlignment.Left;
            txtcmdline.Margin = new Thickness(txtleft, txtcmdlinetop, 0, 0);
            txtcmdline.BorderThickness = new Thickness(0);
            txtcmdline.KeyDown += cmdline_KeyDownEvent;
            

            txtcmdline.TextChanged += delegate(Object sender, TextChangedEventArgs e)
            {
               
                if (IsUserTyping())
                {
                    if (IsAddCommand(txtcmdline.Text))
                    {
                        txtError.Text = "a | add THINGS I WANT TO DO";
                        FadeInAndOut(txtError);

                    }
                    else if (IsListCommand(txtcmdline.Text))
                    {
                        txtError.Text = "ls | list [TAG OR KEYWORD TO SEARCH]";
                        FadeInAndOut(txtError);

                    }
                    else if (IsChangeCommand(txtcmdline.Text))
                    {
                        txtError.Text = "ch | change";
                        FadeInAndOut(txtError);

                    }
                    else if (IsRemoveCommand(txtcmdline.Text))
                    {
                        txtError.Text = "rm | remove ITEMINDEX";
                        FadeInAndOut(txtError);

                    }
                    else if (IsSyncCommand(txtcmdline.Text))
                    {
                        txtError.Text = "sync USERID@gmail.com PASSWORD";
                        FadeInAndOut(txtError);
                    }
                    else if (IsPinCommand(txtcmdline.Text))
                    {
                        txtError.Text = "pin ITEMINDEX PATH | file | folder | none";
                        FadeInAndOut(txtError);
                    }
                    else if (IsActCommand(txtcmdline.Text))
                    {
                        txtError.Text = "act ITEMINDEX";
                        FadeInAndOut(txtError);
                    }
                }
              
               careti = txtcmdline.CaretIndex;
            };
            theGrid.Children.Add(txtcmdline);
        }

        private void InitErrorPopUp()
        {
            if (txtError != null) return;
            txtError = new TextBox();
            txtError.Name = "errtxt";
            this.RegisterName(txtError.Name, txtError);
            txtError.Height = 30;
            txtError.Width = txtwidth/2;
            txtError.Padding = new Thickness(5, 3, 0, 0);
            txtError.BorderThickness = new Thickness(0);
            txtError.Clip = new RectangleGeometry(new Rect(new Point(0, 0), new Point(txtError.Width, txtError.Height)), 10, 10);
            txtError.Focusable = false;
            txtError.Text = "";
           //txtError.FontWeight = FontWeights.Bold;
            txtError.FontSize = 14;
            txtError.Background = new SolidColorBrush(Color.FromArgb(255,100,100,100));
            txtError.Opacity = 0;
            txtError.Foreground = white;
            txtError.HorizontalAlignment = HorizontalAlignment.Left;
            txtError.Margin = new Thickness(txtleft, lblerrtop, 0, 0);
            theGrid.Children.Add(txtError);
        }

        private void InitBackground()
        {
            lblBack = new Label();
            lblBack.Name = "back";
            this.RegisterName(lblBack.Name, lblBack);


            lblBack.Height = txtheight;
            lblBack.Width = txtwidth;
            lblBack.Background = new SolidColorBrush(Colors.White);
            lblBack.HorizontalAlignment = HorizontalAlignment.Left;
            lblBack.Margin = new Thickness(txtleft, txttop, 0, 0);

            theGrid.Children.Add(lblBack);
        }

        private void InitNextPrevTagTxtBox()
        {
            if (txtnextarrow != null && txtprevarrow != null) return;
            txtnextarrow = new TextBox();
            txtprevarrow = new TextBox();
           
            txtnextarrow.Name = "next";
            txtprevarrow.Name = "prev";
          

            this.RegisterName(txtnextarrow.Name, txtnextarrow);
            this.RegisterName(txtprevarrow.Name, txtprevarrow);
          
            Canvas.SetZIndex(txtnextarrow, 110);
            Canvas.SetZIndex(txtprevarrow, 110);

         

            txtnextarrow.Height = 40;
            txtnextarrow.Width = 40;

            txtprevarrow.Height =40;
            txtprevarrow.Width = 40;

          
            txtnextarrow.Margin = new Thickness(txtleft + txtwidth - 35, txtheight - 20, 0, 0);
            txtprevarrow.Margin = new Thickness(txtleft -5, txtheight - 20, 0, 0);

          

            txtnextarrow.HorizontalAlignment = HorizontalAlignment.Left;
            txtprevarrow.HorizontalAlignment = HorizontalAlignment.Left;
            txtnextarrow.VerticalAlignment = VerticalAlignment.Top;
            txtprevarrow.VerticalAlignment = VerticalAlignment.Top;   

            SolidColorBrush trans = new SolidColorBrush(Colors.Transparent);

            txtnextarrow.Background = trans;
            txtprevarrow.Background = trans;

           
            txtnextarrow.TextAlignment = TextAlignment.Center;
            txtprevarrow.TextAlignment = TextAlignment.Center;

            
           txtnextarrow.BorderThickness = new Thickness(0);
           txtprevarrow.BorderThickness = new Thickness(0);

           
            
            
            txtnextarrow.Text = ">";
            txtprevarrow.Text = "<";


            txtnextarrow.Foreground = black;//new SolidColorBrush(Colors.White);
           txtprevarrow.Foreground = black;//new SolidColorBrush(Colors.White);
          
            
            txtnextarrow.FontFamily = def_font_arrow;
            txtprevarrow.FontFamily = def_font_arrow;

           
            
            txtnextarrow.FontWeight = FontWeights.Bold;
            txtprevarrow.FontWeight = FontWeights.Bold;

            
            txtnextarrow.FontSize = 20;
            txtprevarrow.FontSize = 20;

             txtnextarrow.Focusable = false;
            

             txtprevarrow.Focusable = false;
            
            theGrid.Children.Add(txtprevarrow);
            theGrid.Children.Add(txtnextarrow);
        }

        private void NewRichTextBox()
        {
            int i = arr.Count();
            arr.Add(new RichTextBox());
            arr[i].Name = "txt" + id++;
            this.RegisterName(arr[i].Name, arr[i]);

            arr[i].RenderTransform = new TranslateTransform();
            arr[i].Height = txtheight;
            arr[i].Width = txtwidth;
            arr[i].Background = new SolidColorBrush(Color.FromArgb(255, 255, 255, 255));
            arr[i].HorizontalAlignment = HorizontalAlignment.Left;
            arr[i].Margin = new Thickness(txtleft, txttop, 0, 0);
            arr[i].Focusable = false;
           
            arr[i].BorderThickness = new Thickness(0);

            arr[i].FontFamily = def_font;
            arr[i].Document.LineHeight = 5;

            Canvas.SetZIndex(arr[i], 0);
            theGrid.Children.Add(arr[i]);
            MoveX(arr[i], 0, -txtshift, 0);
        }

        private void InitAllTextBoxes()
        {
            arr = new List<RichTextBox>();
            deletedlist =  new List<bool>();
            for (int i = 0; i < TEXTBOX_NO; i++)
            {
                NewRichTextBox();
                deletedlist.Add(false);
            }
            now = arr[TEXTBOX_NO-1];
            nowindex = TEXTBOX_NO-1;
            MoveX(arr[TEXTBOX_NO-1], -txtshift, 0, 0);

            InitCommandLine();
            InitErrorPopUp();

   
        }

        private void TutorialMode()
        {
            arr = new List<RichTextBox>();
            deletedlist = new List<bool>();
            for (int i = 0; i < tutpages; i++)
            {
                NewRichTextBox();
                deletedlist.Add(false);
            }
            now = arr[0];
            nowindex = 0;
            MoveX(arr[0], -txtshift, 0, 0);

            InitCommandLine();
            InitErrorPopUp();
        }

        private void LoadTutorialPages()
        {
            for (int i = 0; i < tutpages; i++)
            {
                arr[i].Document.Blocks.Clear();
                Image img =  new Image();
                img.Source=new BitmapImage(new Uri((new FileInfo(Assembly.GetExecutingAssembly().Location)).DirectoryName+"\\tut\\"+i+".png"));
                img.Width = txtwidth;
                if (i == 3) img.Height = txtheight*2;
                    else img.Height = txtheight;
                arr[i].Document.Blocks.Add(new BlockUIContainer(img));
            }

        }

        private void DestroyTutorialMode()
        {
            for (int i = 0; i < tutpages; i++)
            {
                this.UnregisterName(arr[i].Name);
                theGrid.Children.Remove(arr[i]);
            }
            arr.Clear();
            arr = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();
            InitAllTextBoxes();
            RefreshContents(nowindex);
            tutorialmode = false;
        }

        private void DestroyMainMode()
        {
            for (int i = 0; i < TEXTBOX_NO; i++)
            {
                this.UnregisterName(arr[i].Name);
                theGrid.Children.Remove(arr[i]);
            }
            arr.Clear();
            arr = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();
            TutorialMode();
            LoadTutorialPages();
        }

        private void InitOptions()
        {
            if (!File.Exists(SettingsFile))
            {
                OptionsObject opt = new OptionsObject();
                opt.RunOnStartup = RunOnStartup;
                opt.ShowHotkey = ShowHotkey;
                opt.ExitHotkey = ExitHotkey;
                opt.ScrollHotkey = ScrollHotkey;
                OptionsIO optio = new OptionsIO(SettingsFile);
                optio.Write(opt);
                tutorialmode = true;
            }
            else
            {
                OptionsObject opt = new OptionsIO(SettingsFile).Read();
                ShowHotkey = opt.ShowHotkey;
                ExitHotkey = opt.ExitHotkey;
                ScrollHotkey = opt.ScrollHotkey;
                RunOnStartup = opt.RunOnStartup;
                tutorialmode = false;
            }

            if (!RunOnStartup) deleteshortcut();
            else createshortcut();

            OptWin = new options(winmain);
            OptWin.Show();
            MoveX(OptWin, 0, -(int)OptWin.Width, 0);

            //tutorialmode = true;

        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            winmain.Top = 0;
            winmain.Left = SystemParameters.PrimaryScreenWidth * .05;
            winmain.Width = SystemParameters.PrimaryScreenWidth * .75;
            winmain.Height = SystemParameters.PrimaryScreenHeight/2;

            winmain.RenderTransform = new TranslateTransform();
            MoveY(winmain, 0, -(int)winmain.Height, 0);

            winmain.Background = new SolidColorBrush(Color.FromArgb(0, 255, 255, 255));
            txtwidth = winmain.Width * .8;
            txtheight = winmain.Height * .7;
            txttop = -winmain.Height * .25;//(winmain.Height/2-txtheight)/2;
            txtleft = 20;//(winmain.Width-txtwidth)/2;
            txtcmdlinetop = winmain.Height * .525;
            lblerrtop = winmain.Height * .70;
            txtshift = (int)txtwidth;//(int)winmain.Width;


            RectangleGeometry s = new RectangleGeometry(new Rect(new Point(txtleft, frameTop+10), new Point(txtleft + txtwidth, frameTop + txtheight+40/*winmain.Height*/)),6,6);

            Geometry g = new CombinedGeometry(s, new RectangleGeometry(new Rect(new Point(txtleft, frameTop + txtheight + 40), new Point(txtleft + txtwidth / 2, frameTop + txtheight + 100))));

            theGrid.Clip = g;

            frameTop = winmain.Height * .025;
            show = false;

            history = new List<String>();
            BeginLogic();
           InitBackground();
           InitOptions();
           if (tutorialmode)
           {
               TutorialMode();
               LoadTutorialPages();
               InitNextPrevTagTxtBox();
               showhide();
           }
           else
           {
               InitAllTextBoxes();
               RefreshContents(nowindex);
               InitNextPrevTagTxtBox();
           }
            
           

            //to enable timer
            //begintimer();
            //checkdue(null, null);
            /////////////////////

        }

        private void Window_Unloaded(object sender, RoutedEventArgs e)
        {
            UnhookWindowsHookEx(hookHandle);
            ni.Visible = false;
            ni.Dispose();
        }

        private static void MoveX(UIElement obj, int start, int end, int dur)
        {
            DoubleAnimation datxt = new DoubleAnimation();
            datxt.Duration = new Duration(TimeSpan.FromMilliseconds(dur));
            datxt.From = start;
            datxt.To = end;
            datxt.EasingFunction = new QuarticEase();
            TranslateTransform tt = (TranslateTransform)obj.RenderTransform;
            tt.BeginAnimation(TranslateTransform.XProperty, datxt);


        }

        private static void MoveY(UIElement obj, int start, int end, int dur)
        {
            DoubleAnimation datxt = new DoubleAnimation();
            datxt.Duration = new Duration(TimeSpan.FromMilliseconds(dur));
            datxt.From = start;
            datxt.To = end;
            datxt.EasingFunction = new QuarticEase();


            TranslateTransform tt = (TranslateTransform)obj.RenderTransform;
            tt.BeginAnimation(TranslateTransform.YProperty, datxt);


        }

        private static void FadeInAndOut(UIElement obj)
        {
          
            Storyboard sb = new Storyboard();
        
            DoubleAnimationUsingKeyFrames fi = new DoubleAnimationUsingKeyFrames();
            fi.BeginTime = TimeSpan.FromMilliseconds(0);
          
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(0,TimeSpan.FromMilliseconds(0)));
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(1, TimeSpan.FromMilliseconds(500)));
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(1, TimeSpan.FromMilliseconds(3000)));
           fi.KeyFrames.Add(new LinearDoubleKeyFrame(0, TimeSpan.FromMilliseconds(4000)));


            sb.Children.Add(fi);
            Storyboard.SetTarget(sb, obj);
            Storyboard.SetTargetProperty(sb, new PropertyPath(Control.OpacityProperty));
           
           // sb.AutoReverse = true;  
            sb.Begin();
            
            

        }


        private int GetNextIndex()
        {
            return (nowindex+1)%(tutorialmode?tutpages:TEXTBOX_NO);
        }

        private int GetPrevIndex()
        {
            return (nowindex - 1) < 0 ? (tutorialmode ? tutpages : TEXTBOX_NO) - 1 : nowindex - 1;
        }

        private int GetTagIndex(string tagtofind)
        {
            return taglist.FindIndex(delegate(string tag)
            {
                return tagtofind.CompareTo(tag) == 0;
            });
        }

        private void PurgeDeletedLists()
        {
            for (int i = 0; i < TEXTBOX_NO; i++)
                if (deletedlist[i])
                {
                    theGrid.Children.Remove(arr[i]);
                    this.UnregisterName(arr[i].Name);
                    arr.RemoveAt(i);
                    now = arr[nowindex];

                    deletedlist.RemoveAt(i);
                }
        }

        private void txtbox_PreviewKeyDownEvent(object e, KeyboardEventArgs k)
        {
            int inscreen = 0, rexit = txtshift, lexit = -txtshift, duration = 1000;

            if (IsDown(vkKey(ScrollHotkey)) && k.KeyboardDevice.IsKeyDown(Key.Right))
            {
                MoveX(now, inscreen, lexit, duration);

                PurgeDeletedLists();
                
                nowindex = GetNextIndex();
                now = arr[nowindex];

                
                //txtnext.Text = taglist.ElementAt(GetNextIndex());
                //txtprev.Text = taglist.ElementAt(GetPrevIndex());

                MoveX(now, rexit, inscreen, duration);
                if(!tutorialmode)RefreshContents(nowindex);


            }
            else if (IsDown(vkKey(ScrollHotkey)) && k.KeyboardDevice.IsKeyDown(Key.Left))
            {

                MoveX(now, inscreen, rexit, duration);
                PurgeDeletedLists();
              
                nowindex = GetPrevIndex();
                now = arr[nowindex];

                
               // txtnext.Text = taglist.ElementAt(GetNextIndex());
               // txtprev.Text = taglist.ElementAt(GetPrevIndex());

                MoveX(now, lexit, inscreen, duration);

                if (!tutorialmode) RefreshContents(nowindex);                
                
            }
            else if (IsDown(vkKey(ScrollHotkey)) && k.KeyboardDevice.IsKeyDown(Key.Down))
            {
                now.LineDown();
              
              
            }
            else if (IsDown(vkKey(ScrollHotkey)) && k.KeyboardDevice.IsKeyDown(Key.Up))
            {
                now.LineUp();
              
            }
            else if (k.KeyboardDevice.IsKeyDown(Key.Down))
            {
                if (history.Count > 0)
                {
                    txtcmdline.Text = history[historyindex];
                    historyindex = (historyindex - 1) < 0 ? history.Count - 1 : historyindex - 1;
                    txtcmdline.CaretIndex = txtcmdline.Text.Length;
                }
            }
            else if (k.KeyboardDevice.IsKeyDown(Key.Up))
            {
                if (history.Count > 0)
                {
                    txtcmdline.Text = history[historyindex];
                    historyindex = (historyindex + 1) % history.Count;
                    txtcmdline.CaretIndex = txtcmdline.Text.Length;
                }
            }
           
        }

        private bool IsExitCommand(string userCommand)
        {
            if (Regex.IsMatch(userCommand.Trim(), "^exit\\s*$", RegexOptions.IgnoreCase))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private void HandleAddDelete(GGResult result)
        {
           // RefreshContents(nowindex);
            if (result.GetResultType() == GGResult.RESULT_TYPE.RESULT_ADD)
            {
                if (invoke.GetTagCount(result.GetTag()) == 1)
                {
                    TEXTBOX_NO++;
                    taglist.Add(result.GetTag());
                    deletedlist.Add(false);
                    NewRichTextBox();
                  
                }
            }
            else if(result.GetResultType() == GGResult.RESULT_TYPE.RESULT_REMOVE) //delete
            {
                if (invoke.GetTagCount(result.GetTag()) == -1)
                {
                    TEXTBOX_NO--;
                    int index = GetTagIndex(result.GetTag());
                    deletedlist[index] = true;
                    taglist.RemoveAt(index);
                    nowindex = GetPrevIndex();
                    nowindex = GetNextIndex();
              
           
                }
            }
        }

        private void HandleUpdate(GGResult result)
        {
           // RefreshContents(nowindex);
            string oldtag = result.GetTag();
            string newtag = invoke.GetGGList().GetGGItemAt(result.GetItemIndex()).GetTag();
            if (invoke.GetTagCount(newtag) == 1)
            {
                TEXTBOX_NO++;
                taglist.Add(newtag);
                deletedlist.Add(false);
                NewRichTextBox();
            }
            if (invoke.GetTagCount(oldtag) == -1)
            {
                TEXTBOX_NO--;
                int index = GetTagIndex(result.GetTag());
                deletedlist[index] = true;
                taglist.RemoveAt(index);
                nowindex = GetPrevIndex();
                nowindex = GetNextIndex();
            }


        }

        private void HandleList(GGResult result)
        {
            // command returns something
            Table t = new Table();
            t.Columns.Add(new TableColumn());
            t.Columns.Add(new TableColumn());
            t.Columns.Add(new TableColumn());

            double tablewidth = txtwidth * (13.2 / 16.0);


            t.Columns[0].Width = new GridLength(tablewidth / 2);
            t.Columns[1].Width = new GridLength(tablewidth / 4);
            t.Columns[2].Width = new GridLength(tablewidth / 4);


            t.BorderThickness = new Thickness(txtwidth / 16, 50, 0, 0);
            t.CellSpacing = 10;
            t.RowGroups.Add(AddTextChunkToTable(result.GetMainResult()));
            now.Document.Blocks.Add(t);
        }

        private void cmdline_KeyDownEvent(object e, KeyboardEventArgs k)
        {
            if (!tutorialmode && k.KeyboardDevice.IsKeyDown(Key.Enter))
            {
                if (IsExitCommand(txtcmdline.Text))
                {
                    invoke.CleanUp();
                    Application.Current.Shutdown();
                }
                else if (txtcmdline.Text.StartsWith("wiggle"))
                {
                    wiggle();
                    txtcmdline.Text = "";
                    return;
                }
              
                GGResult result = invoke.InvokeCommand(txtcmdline.Text);
                
                    
                    txtError.Clear();
                    now.Document.Blocks.Clear();
                   
                    if (result.GetResultType() == GGResult.RESULT_TYPE.RESULT_LIST)
                    {
                        HandleList(result);
                    }
                    else if (result.GetResultType() == GGResult.RESULT_TYPE.RESULT_ADD || result.GetResultType() == GGResult.RESULT_TYPE.RESULT_REMOVE)
                    {
                        HandleAddDelete(result);
                    }
                    else if (result.GetResultType() == GGResult.RESULT_TYPE.RESULT_UPDATE)
                    {
                        HandleUpdate(result);
                    }

                    
                    if (result.GetResultType() != GGResult.RESULT_TYPE.RESULT_LIST) RefreshContents(nowindex);

                    txtError.Text = result.GetNotice();
                    if(result.GetNotice() != String.Empty)FadeInAndOut(txtError);
                    history.Add(txtcmdline.Text);
                    if (history.Count > 10) history.RemoveAt(0);
                    historyindex = 0;
                txtcmdline.Text = "";
            }
          
        }

        private void DrawFrame()
        {
            if (blackFrameleft != null && theGrid.Children.Contains(blackFrameleft)) theGrid.Children.Remove(blackFrameleft);
            if (blackFrameright != null && theGrid.Children.Contains(blackFrameright)) theGrid.Children.Remove(blackFrameright);
          

            blackFrameleft = new Polygon();
            blackFrameright = new Polygon();


            // blackFrameleft.Stroke = blackBrush;
            blackFrameleft.Fill = red;
            blackFrameleft.StrokeThickness = 0;

            // blackFrameright.Stroke = blackBrush;
            blackFrameright.Fill = red;
            blackFrameright.StrokeThickness = 0;

       
           

            #region leftbar
            PointCollection polygonPoints = new PointCollection();

            polygonPoints.Add(new Point(txtleft, frameTop));
            polygonPoints.Add(new Point(txtleft + 35, frameTop));
            polygonPoints.Add(new Point(txtleft + 35, frameTop + txtheight));
            polygonPoints.Add(new Point(txtleft, frameTop + txtheight));

            blackFrameleft.Points = polygonPoints;
            Canvas.SetZIndex(blackFrameleft, 99);
            theGrid.Children.Add(blackFrameleft);
            #endregion

            #region rightbar
            polygonPoints = new PointCollection();

            polygonPoints.Add(new Point(txtleft + txtwidth - 35, frameTop));
            polygonPoints.Add(new Point(txtleft + txtwidth, frameTop));
            polygonPoints.Add(new Point(txtleft + txtwidth, frameTop + txtheight));
            polygonPoints.Add(new Point(txtleft + txtwidth - 35, frameTop + txtheight));
            blackFrameright.Points = polygonPoints;

            Canvas.SetZIndex(blackFrameright, 99);
            theGrid.Children.Add(blackFrameright);
            #endregion
        }

        private void DrawOverlay()
        {
            SolidColorBrush transgrey = new SolidColorBrush(Color.FromArgb(100, 0, 0, 0));
          left = new Polygon();
            left.Fill = transgrey;

            PointCollection pc = new PointCollection();

           
            pc.Add(new Point(txtleft + 20, frameTop + 20));
            pc.Add(new Point(txtleft + 20 + (txtwidth/8), frameTop + 20));

            pc.Add(new Point(txtleft + 20 + (txtwidth / 8), frameTop + 20 + (txtheight-40) * .5 - 10));
            pc.Add(new Point(txtleft + 20 + (txtwidth / 8) -10, frameTop + 20 + (txtheight - 40) * .5));
            pc.Add(new Point(txtleft + 20 + (txtwidth / 8), frameTop + 20 + (txtheight - 40) * .5 + 10));

            pc.Add(new Point(txtleft + 20 + (txtwidth / 8), frameTop + 20 + (txtheight - 40)));
            pc.Add(new Point(txtleft + 20, frameTop + 20 + (txtheight - 40) ));
          

            left.Points = pc;

            theGrid.Children.Add(left);

           right = new Polygon();
            right.Fill = transgrey;

            pc = new PointCollection();

            pc.Add(new Point(txtleft  + (txtwidth / 8) * 7 -20, frameTop + 20));
            pc.Add(new Point(txtleft + (txtwidth - 40)+ 20, frameTop + 20));
            pc.Add(new Point(txtleft + (txtwidth - 40) + 20, frameTop + 20 + (txtheight - 40)));
            pc.Add(new Point(txtleft  + (txtwidth / 8) * 7 -20, frameTop + 20 + (txtheight - 40)));

            pc.Add(new Point(txtleft  + (txtwidth / 8) * 7 -20, frameTop + 20 + (txtheight - 40) * .5 - 10));
            pc.Add(new Point(txtleft + (txtwidth / 8)* 7 + 10 -20, frameTop + 20 + (txtheight - 40) * .5));
            pc.Add(new Point(txtleft  + (txtwidth / 8)* 7 -20, frameTop + 20 + (txtheight - 40) * .5 + 10));

           
           


           right.Points = pc;

           theGrid.Children.Add(right);
        }



       

    }
}
       